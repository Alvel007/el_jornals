# Generated by Django 5.0.1 on 2024-01-26 19:48

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('substation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=64, unique=True, verbose_name='Логин')),
                ('first_name', models.CharField(max_length=64, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=64, verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=64, verbose_name='Отчество')),
                ('birth_date', models.DateField(blank=True, default='2000-01-01', verbose_name='Дата рождения')),
                ('position', models.CharField(choices=[('Электромонтер по обслуживанию', 'Электромонтер по обслуживанию'), ('Дежурный инженер', 'Дежурный инженер'), ('Дежурный инженер 2 кат.', 'Дежурный инженер 2 кат.'), ('Дежурный инженер 1 кат.', 'Дежурный инженер 1 кат.'), ('Диспетчер', 'Диспетчер'), ('Ведущий инженер', 'Ведущий инженер'), ('Ведущий инженер по ОП', 'Ведущий инженер по ОП'), ('Начальник', 'Начальник'), ('Начальник ООР', 'Начальник ООР'), ('АТП', 'АТП'), ('Зам. гл. инженера', 'Зам. гл. инженера'), ('Главный инженер', 'Главный инженер'), ('Системный администратор', 'Системный администратор')], default='', max_length=120, null=True, verbose_name='Должность')),
                ('employee_id', models.CharField(max_length=64, unique=True, verbose_name='Таб. номер')),
                ('electrical_safety_group', models.CharField(blank=True, choices=[('III', 'III'), ('IV', 'IV'), ('V', 'V')], max_length=3, verbose_name='Группа по ЭБ')),
                ('slug', models.SlugField(editable=False, unique=True, verbose_name='Слаг')),
                ('is_public', models.BooleanField(default=True, verbose_name='Отображать в списке персонала')),
                ('admin_opj', models.ManyToManyField(blank=True, default=None, related_name='admin_opj', to='substation.substation', verbose_name='Просмотр служебной информации оперативного журнала')),
                ('administrative_staff', models.ManyToManyField(blank=True, default=None, related_name='administrative_staff', to='substation.substation', verbose_name='Административно-технические права')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('main_place_work', models.ForeignKey(blank=True, help_text='Указывается только для персонала, закрепленного за ПС по штатному расписания (необязательно для заполнения).', null=True, on_delete=django.db.models.deletion.PROTECT, to='substation.substation', verbose_name='Основное место работы')),
                ('operational_staff', models.ManyToManyField(blank=True, related_name='operational_staff', to='substation.substation', verbose_name='Оперативные права')),
                ('substation_group', models.ForeignKey(blank=True, help_text='Указывается в какой группе ПС, ЦУС, ПМЭС, МЭС работает персонал.', null=True, on_delete=django.db.models.deletion.PROTECT, to='substation.groupsubstation', verbose_name='Группа подстанций')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
